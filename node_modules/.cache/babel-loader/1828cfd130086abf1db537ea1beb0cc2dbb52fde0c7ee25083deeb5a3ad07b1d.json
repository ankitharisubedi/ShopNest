{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBIW2FBZodj3zUqp7-9PuY_sDJtRmOCgYM\",\n  authDomain: \"react-shop-78c63.firebaseapp.com\",\n  projectId: \"react-shop-78c63\",\n  storageBucket: \"react-shop-78c63.firebasestorage.app\",\n  messagingSenderId: \"1098953388928\",\n  appId: \"1:1098953388928:web:56ae0db190ef76c1988765\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const db = getFirestore();\nexport const createUserDocumentFromAuth = async (userAuth, additionalInformation = {}) => {\n  if (!userAuth) return;\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  //if user data exist\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createAuthUserWithEmailAndPassword(auth, email, password);\n};","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","getFirestore","doc","getDoc","setDoc","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseApp","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","db","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","console","log","message","createAuthUserWithEmailAndPassword","password"],"sources":["/Users/ankitsubedi/react-store/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword } from 'firebase/auth';\nimport { getFirestore, doc, getDoc, setDoc } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBIW2FBZodj3zUqp7-9PuY_sDJtRmOCgYM\",\n  authDomain: \"react-shop-78c63.firebaseapp.com\",\n  projectId: \"react-shop-78c63\",\n  storageBucket: \"react-shop-78c63.firebasestorage.app\",\n  messagingSenderId: \"1098953388928\",\n  appId: \"1:1098953388928:web:56ae0db190ef76c1988765\"\n};\n\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\n\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters( {\n    prompt: \"select_account\"\n});\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const db = getFirestore();\n\nexport const createUserDocumentFromAuth = async( userAuth, additionalInformation = {}) => {\n    if(!userAuth) return;\n    const userDocRef = doc(db, 'users', userAuth.uid);\n    const userSnapshot = await getDoc(userDocRef);\n\n    //if user data exist\n    if(!userSnapshot.exists()){\n        const {displayName,email} = userAuth;\n        const createdAt = new Date();\n        try{\n            await setDoc(userDocRef, {\n                displayName,\n                email,\n                createdAt,\n                ...additionalInformation,\n            });\n        }\n        catch(error){\n            console.log(error.message)\n        }\n    }\n    return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email,password) => {\n    if(!email || !password) return;\n\n    return await createAuthUserWithEmailAndPassword(auth, email, password)\n}\n"],"mappings":"AAAA;AACA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,OAAO,EAAEC,eAAe,EAAEC,kBAAkB,EAAEC,8BAA8B,QAAQ,eAAe;AAC5G,SAASC,YAAY,EAAEC,GAAG,EAAEC,MAAM,EAAEC,MAAM,QAAQ,oBAAoB;AACtE,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,kCAAkC;EAC9CC,SAAS,EAAE,kBAAkB;EAC7BC,aAAa,EAAE,sCAAsC;EACrDC,iBAAiB,EAAE,eAAe;EAClCC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGhB,aAAa,CAACS,cAAc,CAAC;AAEjD,MAAMQ,cAAc,GAAG,IAAId,kBAAkB,CAAC,CAAC;AAE/Cc,cAAc,CAACC,mBAAmB,CAAE;EAChCC,MAAM,EAAE;AACZ,CAAC,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAGnB,OAAO,CAAC,CAAC;AAC7B,OAAO,MAAMoB,qBAAqB,GAAGA,CAAA,KAAMnB,eAAe,CAACkB,IAAI,EAAEH,cAAc,CAAC;AAChF,OAAO,MAAMK,EAAE,GAAGjB,YAAY,CAAC,CAAC;AAEhC,OAAO,MAAMkB,0BAA0B,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,qBAAqB,GAAG,CAAC,CAAC,KAAK;EACtF,IAAG,CAACD,QAAQ,EAAE;EACd,MAAME,UAAU,GAAGpB,GAAG,CAACgB,EAAE,EAAE,OAAO,EAAEE,QAAQ,CAACG,GAAG,CAAC;EACjD,MAAMC,YAAY,GAAG,MAAMrB,MAAM,CAACmB,UAAU,CAAC;;EAE7C;EACA,IAAG,CAACE,YAAY,CAACC,MAAM,CAAC,CAAC,EAAC;IACtB,MAAM;MAACC,WAAW;MAACC;IAAK,CAAC,GAAGP,QAAQ;IACpC,MAAMQ,SAAS,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC5B,IAAG;MACC,MAAMzB,MAAM,CAACkB,UAAU,EAAE;QACrBI,WAAW;QACXC,KAAK;QACLC,SAAS;QACT,GAAGP;MACP,CAAC,CAAC;IACN,CAAC,CACD,OAAMS,KAAK,EAAC;MACRC,OAAO,CAACC,GAAG,CAACF,KAAK,CAACG,OAAO,CAAC;IAC9B;EACJ;EACA,OAAOX,UAAU;AACrB,CAAC;AAED,OAAO,MAAMY,kCAAkC,GAAG,MAAAA,CAAOP,KAAK,EAACQ,QAAQ,KAAK;EACxE,IAAG,CAACR,KAAK,IAAI,CAACQ,QAAQ,EAAE;EAExB,OAAO,MAAMD,kCAAkC,CAAClB,IAAI,EAAEW,KAAK,EAAEQ,QAAQ,CAAC;AAC1E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}